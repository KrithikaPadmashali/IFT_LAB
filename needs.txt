Dependency for Ui

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>demo_question</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>demo_question</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
				<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>nz.net.ultraq.thymeleaf</groupId>
			<artifactId>thymeleaf-layout-dialect</artifactId>
		</dependency>
	</dependencies>
    
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
========================================================================================================================================================================================
Properties for crud
# Application name (optional, used in logs, Actuator, etc.)
spring.application.name=lab56_p

# MySQL Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/lab56?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=k1r2i3t4h5@08

# JPA (Hibernate) Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
=========================================================================================================================================================================================
properties for ui
spring.application.name=demo_question
#SQL configuration 
spring.datasource.url=jdbc:mysql://localhost:3306/springboot_db
spring.datasource.username=root
spring.datasource.password=k1r2i3t4h5@08
# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# --- Server Configuration ---
server.port=8080


# --- Thymeleaf Configuration ---
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
# --- Validation Configuration ---
spring.messages.basename=messages
spring.messages.encoding=UTF-8

# --- Logging ---
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
=========================================================================================================================================================================================

=========================================================================================================================================================================================
head for the layout 
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/web/thymeleaf/layout">
<head>
	<link rel="stylesheet" th:href="@{https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css}">
	<script th:src="@{https://code.jquery.com/jquery-3.5.1.slim.min.js}"></script>
	<script th:src="@{https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js}"></script>

    <meta charset="UTF-8">
    <title layout:title-pattern="${pageTitle} - My App">My App</title>
    <link rel="stylesheet" th:href="@{https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css}">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
            <a class="navbar-brand" href="/" th:href="@{/}">My App</a>
          <!--  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button> -->
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" th:href="@{/}">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" th:href="@{/users}">Users</a>
                    </li>
		        <li class="nav-item">
			<a class="nav-link" th:href="@{/new}">New</a>
		    </li>
                </ul>
            </div>
        </nav>
    </header>
    <main class="container mt-4">
        <section layout:fragment="content"></section>
    </main>
    <footer class="text-center mt-5">
        <p>&copy; 2024 My App</p>
    </footer>
</body>
</html>
==========================================================================================================================================================================================
userform
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/web/thymeleaf/layout"
      layout:decorate="layout.html">
<body>
    <section layout:fragment="content">
        <h1>Add User</h1>
        <form th:action="@{/save}" th:object="${user}" method="post">
            <div class="form-group">
                <label for="name">Name</label>
                <input type="text" class="form-control" id="name" name="name" th:field="*{name}">
                <div class="text-danger" th:if="${#fields.hasErrors('name')}" th:errors="*{name}"></div>
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" name="email" th:field="*{email}">
                <div class="text-danger" th:if="${#fields.hasErrors('email')}" th:errors="*{email}"></div>
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </form>
    </section>
</body>
</html>
========================================================================================================================================================================================
users
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="layout">
<head>
    <meta charset="UTF-8">
    <title>User List</title>
</head>
<body>
	<div layout:fragment="content">
    <h2>User List</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            <tr th:each="user : ${users}">
                <td th:text="${user.id}"></td>
                <td th:text="${user.name}"></td>
                <td th:text="${user.email}"></td>
				
            </tr>
        </tbody>
    </table>
    <nav>
        <ul class="pagination">
            <li class="page-item" th:if="${currentPage > 1}">
                <a class="page-link" th:href="@{'/users?page=' + ${currentPage - 1}}">Previous</a>
            </li>
            <li class="page-item" th:each="i : ${#numbers.sequence(1, totalPages)}"
                th:classappend="${i == currentPage} ? 'active'">
                <a class="page-link" th:href="@{'/users?page=' + ${i}}" th:text="${i}"></a>
            </li>
            <li class="page-item" th:if="${currentPage < totalPages}">
                <a class="page-link" th:href="@{'/users?page=' + ${currentPage + 1}}">Next</a>
            </li>
        </ul>
    </nav>
	</div>
</body>
</html>
==========================================================================================================================================================================================
service
package com.example.demo_question.service;

import com.example.demo_question.entity.User;
import com.example.demo_question.repository.UserRepository;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public Page<User> getPaginatedUsers(int page, int pageSize) {
        return userRepository.findAll(PageRequest.of(page, pageSize));
    }

	public List<User> getAllUsers() {
		// TODO Auto-generated method stub
		return userRepository.findAll();
	}

	public void saveUser( User user) {
		 userRepository.save(user);
		
	}
}
==========================================================================================================================================================================================
controller 
package com.example.demo_question.controller;


import com.example.demo_question.service.UserService;

import jakarta.validation.Valid;

import com.example.demo_question.entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/")
    public String home() {
        return "home";
    }

    @GetMapping("/users")
    public String getUsers(
            @RequestParam(defaultValue = "1") int page,
            Model model) {
        int pageSize = 8; // Number of users per page
        Page<User> userPage = userService.getPaginatedUsers(page - 1, pageSize);

        model.addAttribute("users", userPage.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", userPage.getTotalPages());
        model.addAttribute("pageTitle", "User List");
        return "users";
    }
    
    
    @GetMapping("/allusers")
    public String listUsers(Model model) {
        model.addAttribute("pageTitle", "User List");
        model.addAttribute("users", userService.getAllUsers());
        return "userdetails";
    }

    @GetMapping("/new")
    public String showCreateForm(Model model) {
        model.addAttribute("pageTitle", "Add User");
        model.addAttribute("user", new User());
        return "userform";
    }

    @PostMapping("/save")
    public String saveUser(@Valid @ModelAttribute("user") User user, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("pageTitle", "Add User");
            return "userform";
        }
        userService.saveUser(user);
        return "redirect:/users";
    }
}
=========================================================================================================================================================================================
dependencies for CRUD
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>lab56_p</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>lab56_p</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>

=========================================================================================================================================================================================
Home
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="layout">
<head>
    <meta charset="UTF-8">
    <title>Home</title>
</head>
<body>
	<div layout:fragment="content">
    <h1>Welcome to My App</h1>
    <p>Click on "Users" in the navigation bar to view the user list.</p>
	</div>
</body>
</html>
===========================================================================================================================================================================================


package com.example.lab56_p.entity;

import jakarta.persistence.*;
import java.util.*;

@Entity
public class Branch {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private double rate;

    @ManyToOne
    private Branch parent;

    @OneToMany(mappedBy = "parent", cascade = CascadeType.ALL)
    private List<Branch> children = new ArrayList<>();

    @OneToMany(mappedBy = "branch", cascade = CascadeType.ALL)
    private List<Account> accounts = new ArrayList<>();

    // Getters and Setters
}
package com.example.lab56_p.entity;

import jakarta.persistence.*;

@Entity
public class Account {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String holderName;
    private double rate;

    @ManyToOne
    private Branch branch;

    // Getters and Setters
}
package com.example.lab56_p.repository;

import com.example.lab56_p.entity.Branch;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BranchRepository extends JpaRepository<Branch, Long> {}

package com.example.lab56_p.repository;

import com.example.lab56_p.entity.Account;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AccountRepository extends JpaRepository<Account, Long> {}

package com.example.lab56_p.service;

public interface BranchService {
    void updateRate(Long branchId, double newRate);
}
package com.example.lab56_p.service.impl;

import com.example.lab56_p.entity.Branch;
import com.example.lab56_p.entity.Account;
import com.example.lab56_p.repository.BranchRepository;
import com.example.lab56_p.service.BranchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import jakarta.transaction.Transactional;

@Service
public class BranchServiceImpl implements BranchService {

    @Autowired
    private BranchRepository branchRepository;

    @Override
    @Transactional
    public void updateRate(Long branchId, double newRate) {
        Branch branch = branchRepository.findById(branchId).orElseThrow();
        updateBranchRecursively(branch, newRate);
        branchRepository.save(branch);  // Save the updated hierarchy
    }

    private void updateBranchRecursively(Branch branch, double newRate) {
        branch.setRate(newRate);
        for (Account account : branch.getAccounts()) {
            account.setRate(newRate);
        }
        for (Branch child : branch.getChildren()) {
            updateBranchRecursively(child, newRate);
        }
    }
}
package com.example.lab56_p.controller;

import com.example.lab56_p.service.BranchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/branches")
public class BranchController {

    @Autowired
    private BranchService branchService;

    @PutMapping("/{id}/updateRate")
    public String updateRate(@PathVariable Long id, @RequestParam double rate) {
        branchService.updateRate(id, rate);
        return "Rate updated successfully!";
    }
}


